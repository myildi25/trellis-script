name: Trellis Generator Auto‑Run

###############################################################################
# ❶  Give the GITHUB_TOKEN “actions: write” so it can kick off the next run
###############################################################################
permissions:
  contents: read          # pull the code
  actions: write          # dispatch another workflow run

on:
  workflow_dispatch:
    inputs:
      confirm:
        description: 'Type "yes" to start processing'
        required: true
        default: 'no'
      auto_continue:
        description: 'Automatically continue if time limit reached?'
        required: true
        default: 'yes'
        type: choice
        options: [ 'yes', 'no' ]

###############################################################################
# ❷  Keep only one run *per branch* at a time so loops don’t collide
###############################################################################
concurrency:
  group: trellis‑autorun‑${{ github.ref }}
  cancel-in-progress: false   # let the current loop finish

jobs:
  generate:
    runs-on: ubuntu-latest
    timeout-minutes: 360        # 6 h safety cap

    outputs:
      should_continue: ${{ steps.check-continue.outputs.should_continue }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements_trellis.txt

    # ── Mask secrets so they never appear in logs ──
    - name: Mask secrets
      run: |
        echo "::add-mask::$RUNPOD_USERNAME"
        echo "::add-mask::$RUNPOD_PASSWORD"
        echo "::add-mask::$TRELLIS_API_HOST"
        echo "::add-mask::$TRELLIS_API_URL"
      env:
        RUNPOD_USERNAME:  ${{ secrets.RUNPOD_USERNAME }}
        RUNPOD_PASSWORD:  ${{ secrets.RUNPOD_PASSWORD }}
        TRELLIS_API_HOST: ${{ secrets.TRELLIS_API_HOST }}
        TRELLIS_API_URL:  ${{ secrets.TRELLIS_API_URL }}

    # ── Main run ──
    - name: Run Trellis Generator
      if: ${{ github.event.inputs.confirm == 'yes' }}
      env:
        SUPABASE_URL:         ${{ secrets.SUPABASE_URL }}
        SUPABASE_SERVICE_KEY: ${{ secrets.SUPABASE_SERVICE_KEY }}
        TRELLIS_API_HOST:     ${{ secrets.TRELLIS_API_HOST }}
        TRELLIS_API_URL:      ${{ secrets.TRELLIS_API_URL }}
        RUNPOD_USERNAME:      ${{ secrets.RUNPOD_USERNAME }}
        RUNPOD_PASSWORD:      ${{ secrets.RUNPOD_PASSWORD }}
      run: |
        echo "🚀 Starting Trellis 3D Generation"
        echo "⏰ Will run for up to 5 h 55 m"
        echo "Job started at: $(date)"

        timeout --signal=SIGTERM --kill-after=30s 21300 \
                python trellis_3d_generator_simple.py || EXIT_CODE=$?

        if [ "${EXIT_CODE:-0}" -eq 124 ]; then
          echo "⏰ Time limit reached – will continue in next run"
          echo "TIMEOUT_REACHED=true"  >> "$GITHUB_ENV"
        elif [ "${EXIT_CODE:-0}" -eq 0 ]; then
          echo "✅ Processing completed successfully"
          echo "TIMEOUT_REACHED=false" >> "$GITHUB_ENV"
        else
          echo "❌ Script failed with exit code: ${EXIT_CODE:-0}"
          exit ${EXIT_CODE:-1}
        fi

    # ── Decide whether to re‑queue ──
    - name: Check if should continue
      id: check-continue
      run: |
        if [[ "${{ env.TIMEOUT_REACHED }}" == "true" && \
              "${{ github.event.inputs.auto_continue }}" == "yes" ]]; then
          echo "should_continue=true"  >> "$GITHUB_OUTPUT"
          echo "📊 Another run will be triggered."
        else
          echo "should_continue=false" >> "$GITHUB_OUTPUT"
          echo "🏁 Processing finished or auto‑continue disabled."
        fi

  # ────────────────────────────────────────────────────────────────────────────
  trigger-next-run:
    needs: generate
    if: ${{ needs.generate.outputs.should_continue == 'true' }}
    runs-on: ubuntu-latest

    steps:
    - name: Trigger next run
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        OWNER_REPO:   ${{ github.repository }}
        WF_FILE:      trellis-autorun.yml
      run: |
        echo "🔄 Triggering follow‑up workflow run…"
        curl -X POST \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer $GITHUB_TOKEN" \
          "https://api.github.com/repos/$OWNER_REPO/actions/workflows/$WF_FILE/dispatches" \
          -d "{
                \"ref\": \"${{ github.ref }}\",
                \"inputs\": {
                  \"confirm\":       \"yes\",
                  \"auto_continue\": \"${{ github.event.inputs.auto_continue }}\"
                }
              }"
        echo "✅ Next run dispatched."
